1. (5 баллов) 
Напишите программу spellchecker.py, которая читает из файла words.txt список слов, читает с экрана одно слово и выводит 3 наиболее похожих на него слова из words.txt. Похожесть понимается в смысле расстояния Левенштейна, но с тем отличием, что замена одной буквы на клавиатуре на соседнюю с ней в том же ряду считается за половину правки (т.е. за половину любой другой замены). То есть программа должна считать, что "сдон" более похож на "слон", чем на "сдан". Вам потребуется сделать словарь, отображающий букву на соседнюю. йцукенг -> цукенгш и обратно. Попробуйте подобрать такой x и разобраться в конструкции dict(zip(x, x[1:])), чтобы получался нужный эффект.

2. (5 баллов)
Соберите небольшой (50К словоупотреблений) корпус либо новостных, либо энциклопедических текстов (он должен за 10 минут собираться с помощью Ctrl-C Ctrl-V. Если за 10 минут честного кропотливого труда, перед которым вы тщательно нашли место, где много больших страниц, у вас собралось меньше текста, то оставьте меньше; автоматизировать этот процесс нисколько не возбраняется, но в любом случае не тратьте на него много времени). В качестве второго корпуса возмите Анну Каренину. Сохраните корпуса в файлы corpus1.txt, corpus2.txt. Напишите программу genre-by-letters.py, которая наглядно демонстрирует ответ на вопрос: можно ли различить предложения этих двух текстов, пользуясь лишь признаками 

длина предложения в буквах, 
число различных букв в предложении, 
число гласных в предложении, 
медиана числа букв в слове, 
медиана числа гласных в слове. 

Для этого превратите каждое предолжение в список соответствующих чисел. Выведите на экран распределение данных по предложениям по двум осям, дающим наилучшее разделение (не забывайте, что пара осей для обоих текстов должна быть одинаковой).
